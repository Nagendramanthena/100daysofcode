class Solution {
    public boolean canJump(int[] nums) {
      boolean b = true;
      int l = nums.length;
      int index=0;
      if(l>1){
      for(int i=0;i<l;i++){
          if(nums[i]==0){
              index=i;
              int it = 0;
              b=false;
              for(int j=index-1;j>=0;j--){
                  if(nums[j] != it+1 && nums[j]!=0){
                      b=true;
                      break;
                  }
                  else if(nums[j] == 0){
                      if(j>0){
                          if(nums[j-1] == l-1){
                              b=true;
                              break;
                          }
                      }
                      else{
                      b = false;
                      break;
                      }
                  }
                  else{
                      it = nums[j];
                  }
              }
          }
      }
      }
    else{
        b = true;
    }
    return b;
    }
}

class Solution {
    public boolean canJump(int[] nums) {
        int lastGoodIndexPosition = nums.length-1;
        for(int i=nums.length-1;i>=0;i--){
            if(i+nums[i] >= lastGoodIndexPosition){
                lastGoodIndexPosition = i;
            }
        }
     return lastGoodIndexPosition == 0;
    }
}

// Median

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int a1 = nums1.length;int b1 = nums2.length;int c1 = a1+b1;double median=0;
        int[] c = new int[c1];
        System.arraycopy(nums1, 0, c, 0, a1);
        System.arraycopy(nums2, 0, c, a1, b1);
        Arrays.sort(c);
        if(c1%2==0){
            double d = 2.00;
            median = (c[(c1/2)-1]+c[(c1/2)])/d;
        }
        else{
            int b = c1/2;
            median = c[b];
        }
        return median;
    }
}


