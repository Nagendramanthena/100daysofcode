class Solution {
    public boolean canJump(int[] nums) {
      boolean b = true;
      int l = nums.length;
      int index=0;
      if(l>1){
      for(int i=0;i<l;i++){
          if(nums[i]==0){
              index=i;
              int it = 0;
              b=false;
              for(int j=index-1;j>=0;j--){
                  if(nums[j] != it+1 && nums[j]!=0){
                      b=true;
                      break;
                  }
                  else if(nums[j] == 0){
                      if(j>0){
                          if(nums[j-1] == l-1){
                              b=true;
                              break;
                          }
                      }
                      else{
                      b = false;
                      break;
                      }
                  }
                  else{
                      it = nums[j];
                  }
              }
          }
      }
      }
      
      //Remove element
      class Solution {
    public int removeElement(int[] nums, int val) {
        if(nums.length ==0){return 0;}
        
        int size =0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]!=val){
                nums[size] = nums[i];
                size++;
            }
        }
     return size;
    }
}
    else{
        b = true;
    }
    return b;
    }
}

class Solution {
    public boolean canJump(int[] nums) {
        int lastGoodIndexPosition = nums.length-1;
        for(int i=nums.length-1;i>=0;i--){
            if(i+nums[i] >= lastGoodIndexPosition){
                lastGoodIndexPosition = i;
            }
        }
     return lastGoodIndexPosition == 0;
    }
}

// Median

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int a1 = nums1.length;int b1 = nums2.length;int c1 = a1+b1;double median=0;
        int[] c = new int[c1];
        System.arraycopy(nums1, 0, c, 0, a1);
        System.arraycopy(nums2, 0, c, a1, b1);
        Arrays.sort(c);
        if(c1%2==0){
            double d = 2.00;
            median = (c[(c1/2)-1]+c[(c1/2)])/d;
        }
        else{
            int b = c1/2;
            median = c[b];
        }
        return median;
    }
}

// last word length
class Solution {
    public int lengthOfLastWord(String ss) {
        String s = ss.trim();
        int l =0;
        for(int i=s.length()-1;i>=0;i--){
           if(s.charAt(i)!= ' '){
               l++;
           } 
            else{
                break;
            }
        }
     return l;
    }
}

// Remove Duplicates from sorted ARray
class Solution {
    public int removeDuplicates(int[] nums) {
        if(nums.length==0) return 0;
        int b=0;
        int prev = Integer.MAX_VALUE;
        for(int i=0;i<nums.length;i++){
            if(prev != nums[i]){
                 prev = nums[i];
                nums[b] = nums[i];
                b++;
            }
        }
     return b;
    }
}

// Insert Postion(O(logn))
class Solution {
    public int searchInsert(int[] nums, int target) {
        int l = nums.length;int t=0;
        if(nums[(l/2)]>target){
            for(int i=(l/2)-1;i>=0;i--){
                if(nums[i]<target){
                    t = i+1;
                    break;
                }
                else if(nums[i] == target){
                    t = i;
                }
            }
        }
        else if(nums[(l/2)] == target){
            t = l/2;
        }
        else{
            for(int i=(l/2);i<l;i++){
                if(nums[i]>=target){
                    t = i;
                    break;
                }
                else if(i == l-1 &&  nums[i] < target){
                    t = l;
                    break;
                }
            }
        }
        return t;
    }
}

// Can Place Flowers
class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int pos =0;
        int l = flowerbed.length;
        for(int i=0;i<flowerbed.length;i++){
            if(flowerbed[i] == 0){
                if(i>0 && i<flowerbed.length-1){
                    int beforebed = flowerbed[i-1];
                    int afterbed = flowerbed[i+1];
                    if(beforebed == 0 && afterbed == 0){
                        pos++;
                        flowerbed[i] = 1;
                    }
                }
                else if(i==0 && l>1){
                    int afterbed = flowerbed[i+1];
                    if(afterbed == 0){
                        pos++;
                        flowerbed[i] =1;
                    }
                }
                else if(i==0 && l==1){
                    if(flowerbed[i]==0){
                        pos++;
                    }
                }
                else{
                    int befroebed = flowerbed[i-1];
                    if(befroebed == 0){
                        pos++;
                        flowerbed[i]=1;
                    }
                }
            }
        }
        return pos>=n;
    }
}
