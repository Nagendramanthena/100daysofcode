////////// Remove Duplicates from sorted list ///////
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
     ArrayList<Integer> k = new ArrayList<Integer>();
        if(head == null){return null;}
        ListNode temp = head;
        while(temp!=null){
            if(!k.contains(temp.val)){
                k.add(temp.val);
            }
            temp = temp.next;
        }
        ListNode newhead = new ListNode(k.get(0),null);
        for(int i=1;i<k.size();i++){
            ListNode India = new ListNode(k.get(i),null);
            temp =newhead;
            while(temp.next!=null){
                temp = temp.next;
            }
            temp.next = India;
        }
        return newhead;
    }
}
/////// Palindrome LinkedList //////

class Solution {
    public boolean isPalindrome(ListNode head) {
        ArrayList<Integer> k = new ArrayList<Integer>();
        ListNode temp = head;
        while(temp!=null){
            k.add(temp.val);temp = temp.next;
        }
        for(int i=0;i<k.size()/2;i++){
            if(k.get(i) != k.get(k.size()-i-1)){
                return false;
            }
        }
        return true;
    }
}

//////////// Linked List cycle /////
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode temp = head;int size=0;
        while(temp!=null){
            size++;
            if(size>Math.pow(10,4)){
                return true;
            }
            temp = temp.next;
            
        }
        return false;
        
    }
}

