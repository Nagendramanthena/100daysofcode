// two sum approach leetcode

class Solution {
    public int[] twoSum(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[j] == target - nums[i]) {
                    return new int[] { i, j };
                }
            }
        }
        // In case there is no solution, we'll just return null
        return null;
    }
}

// single number(136)
class Solution {
    public int singleNumber(int[] nums) {
        if(nums.length==1) return nums[0];
        int single = 0;
        Arrays.sort(nums);
        for(int i=0;i<nums.length;i++){
            if(i>0 && i<nums.length-1){
              if(nums[i-1] != nums[i] && nums[i+1] != nums[i]){
                  single = nums[i];
              }
            }
            else if(i==0){
                if(nums[i]!=nums[i+1]){
                    single = nums[i];
                }
            }
            else{
                if(nums[i] != nums[i-1]){
                    single = nums[i];
                }
            }
        }
        return single;
    }
 o(n);
 
 // Kth smallest element in a sorted array
 class Solution {
    public int kthSmallest(int[][] matrix, int k) {
     if(matrix.length == 1) return matrix[0][0];
      int A[] = new int[matrix.length*matrix.length];int l=0;
      for(int i=0;i<matrix.length;i++){
          for(int j=0;j<matrix.length;j++){
              A[l] = matrix[i][j];
              l++;
          }
      }
        Arrays.sort(A);
        return A[k-1];
    }
}

class Solution {
    public int missingNumber(int[] nums) {
        int n = nums.length;int k=10;
        ArrayList<Integer> cars = new ArrayList<Integer>();
        for(int i=0;i<n;i++){
            cars.add(nums[i]);
        }
        for(int i=0;i<=n;i++){
            if(!cars.contains(i)){
                k = i;
                break;
            }
        }
        return k;
    }
}

// Find duplicate number
class Solution {
    public int findDuplicate(int[] nums) {
        Arrays.sort(nums);int k=0;
        int previous = 0;
        for(int i=0;i<nums.length;i++){
            if(nums[i] == previous){
              k = nums[i];   
            }
            else {
                previous = nums[i];
            }
        }
        return k;
    }
}
 
