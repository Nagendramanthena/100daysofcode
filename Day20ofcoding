/////////// Build Array from permutation ///////
class Solution {
    public int[] buildArray(int[] nums) {
       int A[]  =new int[nums.length];
        for(int i=0;i<nums.length;i++){
            A[i] = nums[nums[i]];
        }
        return A;
    }
}


//// Set  Matrix Zero ///////

class Solution {
    public void setZeroes(int[][] matrix) {
        ArrayList<Integer>  row =new ArrayList<Integer>();
        ArrayList<Integer>  column =new ArrayList<Integer>();
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[i].length;j++){
                if(matrix[i][j] == 0){
                       row.add(i);column.add(j); 
                    }
                }
            }
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[i].length;j++){
                if(row.contains(i) || column.contains(j)){matrix[i][j] = 0;}
            }
        }
        }
    }
    
    /// Total number of matches played /////////
    class Solution {
    public int numberOfMatches(int n) {
       int matches = 0;
        while(n>1){
            if(n%2 == 0){
                matches += n/2;n = n/2;
            }
            else{
                matches+=(n-1)/2 + (1);n = (n-1)/2;
            }
        }
        return matches;
    }
}
