/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> leaf111 = new ArrayList<Integer>();
    List<Integer> leaf222 = new ArrayList<Integer>();
    public void dfs(TreeNode root,List<Integer> leaf1){
        if(root == null){
            return;
        }
        if(root.left == null && root.right == null){
            leaf1.add(root.val);
        }
        dfs(root.left,leaf1);
        dfs(root.right,leaf1);
    }
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        dfs(root1,leaf111);
        dfs(root2,leaf222);
        if(leaf111.size()!=leaf222.size()) return false;
       for(int i=0;i<leaf111.size();i++){
           if(leaf111.get(i)!=leaf222.get(i)){
               return false;
           }
       }
        return true;
    }
}

////////////// 276(path to leafs) ////////

class Solution {
    List<String> k =  new ArrayList<>();
    String s = "";
    public void dfs(TreeNode root,String s){
        if(root == null){
            return;
        }
        if(root.left!=null || root.right!=null){
        s += root.val+"->";
        }
        if(root.left == null && root.right ==null){
            s += root.val;
            k.add(s);
        }
        dfs(root.left,s);
        dfs(root.right,s);
    }
    public List<String> binaryTreePaths(TreeNode root) {
        dfs(root,s);
        return k;
    }
}

///////////////// pathsum /////////////
class Solution {
    int target = 0;boolean b = false;
    
    public void dfs(TreeNode root,int val){
        if(root == null){
            return;
        }
        val += root.val;
        if(root.left == null && root.right == null){
            if(val == target){
                b = true;
            }
        }
        dfs(root.left,val);
        dfs(root.right,val);
    }
    public boolean hasPathSum(TreeNode root, int targetSum) {
        int value = 0;
        target = targetSum;
        dfs(root,value);
        return b;
    }
}

///////////// Two sum ////////
class Solution {
    List<Integer> k = new ArrayList<Integer>();
    
    public void dfs(TreeNode root){
        if(root == null){
            return;
        }
        dfs(root.left);
        k.add(root.val);
        dfs(root.right);
    }
    public boolean findTarget(TreeNode root, int target) {
        dfs(root);
        for(int i=0;i<k.size();i++){
            for(int j=0;j<k.size();j++){
                if(i!=j && k.get(i)+k.get(j) == target){
                    return true;
                }
            }
        }
        
        return false;
    }
}

/// SUm of left leaves(404)
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int value =0 ;
    
    public void dfs(TreeNode root){
        if(root == null){
            return;
        }
        if(root.left!=null && root.left.left==null && root.left.right == null){
         value += root.left.val;
        }
        dfs(root.left);
        dfs(root.right);
        
    }
    public int sumOfLeftLeaves(TreeNode root) {
        dfs(root);
        
        return value;
    }
}
