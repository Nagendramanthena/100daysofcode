//////////////// Binary Search ////////////
class Solution {
    public int search(int[] nums, int target) {
        int middle_index = nums.length/2;int index=-1;
        int middle = nums[middle_index];
        if(middle>target){
            for(int i=0;i<middle_index;i++){
                if(nums[i]==target){index =i;}
            }
        }
        else{
            for(int i=middle_index;i<nums.length;i++){
                if(nums[i]==target)
                    index=i;
            }
        }
        return index;
        }
}
//////////candies/////////
import java.util.*;
class Solution {
    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {
         List<Boolean> list = new ArrayList<Boolean>();
        int max=0;
        for(int i=0;i<candies.length;i++){
            if(max<candies[i]){max = candies[i];}
        }
        for(int i=0;i<candies.length;i++){
            candies[i] = candies[i]+extraCandies;
        }
        for(int i=0;i<candies.length;i++){
            if(candies[i]>=max){
                list.add(true);
            }
            else{
                list.add(false);
            }
        }
        return list;
    }
}

//////////////// DI String Match ///////
class Solution {
    public int[] diStringMatch(String S) {
        int N = S.length();
        int lo = 0, hi = N;
        int[] ans = new int[N + 1];
        for (int i = 0; i < N; ++i) {
            if (S.charAt(i) == 'I')
                ans[i] = lo++;
            else
                ans[i] = hi--;
        }

        ans[N] = lo;
        return ans;
    }
}


////////////////// 1D to 2D ARRay
class Solution {
    public int[][] construct2DArray(int[] original, int m, int n) {
        int A[][]  = new int[m][n];
        int row = 0;int column = 0;
        if(m*n == original.length){
        for(int i=0;i<original.length;i++){
            if(m-1>=row && n-1>=column){
                A[row][column] = original[i];column++;
            }
           
            else if(m-1>=row && column>=n){
                row++;
                column = 0;
                A[row][column] = original[i];column++;
            }
        }
            return A;
        }
        else{
            return new int[0][];
        }
        
    }
}

////////////// Min distance to target ////
class Solution {
    public int getMinDistance(int[] nums, int target, int start) {
        int max=Integer.MAX_VALUE;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==target){
                int current = Math.abs(i-start);
                if(current<max){
                    max = current;
                }
            }
        }
        return max;
    }
}

/////////////// 0ms Approach
class Solution {
    public int getMinDistance(int[] nums, int target, int start) {
        int x=Integer.MAX_VALUE;
        for(int i=0;i<nums.length && x>Math.abs(i-start);i++){
            if(nums[i]==target) 
                x=Math.abs(i-start);
        }
        return x;
    }
}

//////////////////////////// LinkedList 1st Problem /////////////
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode[] A = new ListNode[100];
        int t = 0;
        while (head != null) {
            A[t++] = head;
            head = head.next;
        }
        return A[t / 2];
    }
}

/////////////////////////// Fast and slow /////////////
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow = head, fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
}

//////////////// Valid Parentheses ///////////////
class Solution {
    public boolean isValid(String s) {
        Stack<Character> st = new Stack<Character>();
        for(int i=0;i<s.length();i++){
            switch(s.charAt(i)){
                    case(')'):
                    {
                        if(st.size()!=0 && st.peek() == '('){
                            st.pop();
                        }
                        else{st.push(s.charAt(i));}
                    }
                    break;
                    
                    case('}'):
                    {if(st.size()!=0 && st.peek() == '{') st.pop();
                        else{st.push(s.charAt(i));}
                    }
                                     
                    break;
                                     
                    case(']'):
                    if(st.size()!=0 && st.peek() == '[') st.pop();
                    else st.push(s.charAt(i));
                    break;
                    
                default:
                    st.push(s.charAt(i));
                    break;
                                     
                    
            }
        }
      return st.size() == 0;
    }
}
