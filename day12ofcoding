//////////////// Binary Search ////////////
class Solution {
    public int search(int[] nums, int target) {
        int middle_index = nums.length/2;int index=-1;
        int middle = nums[middle_index];
        if(middle>target){
            for(int i=0;i<middle_index;i++){
                if(nums[i]==target){index =i;}
            }
        }
        else{
            for(int i=middle_index;i<nums.length;i++){
                if(nums[i]==target)
                    index=i;
            }
        }
        return index;
        }
}
//////////candies/////////
import java.util.*;
class Solution {
    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {
         List<Boolean> list = new ArrayList<Boolean>();
        int max=0;
        for(int i=0;i<candies.length;i++){
            if(max<candies[i]){max = candies[i];}
        }
        for(int i=0;i<candies.length;i++){
            candies[i] = candies[i]+extraCandies;
        }
        for(int i=0;i<candies.length;i++){
            if(candies[i]>=max){
                list.add(true);
            }
            else{
                list.add(false);
            }
        }
        return list;
    }
}

//////////////// DI String Match ///////
class Solution {
    public int[] diStringMatch(String S) {
        int N = S.length();
        int lo = 0, hi = N;
        int[] ans = new int[N + 1];
        for (int i = 0; i < N; ++i) {
            if (S.charAt(i) == 'I')
                ans[i] = lo++;
            else
                ans[i] = hi--;
        }

        ans[N] = lo;
        return ans;
    }
}
