///////////// Delete the Middle Node ////////////////////
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteMiddle(ListNode head) {
       ListNode temp = head;int size=0;
        while(temp!=null){
            size++;temp = temp.next;
        }
        if(size==1){head = null;}
        int target = size/2;
        size=0;
        temp = head;ListNode prev = head;
        while(temp!=null){
            if(size == target){
                prev.next = temp.next;
                break;
            }
            size++;prev = temp;temp = temp.next;
        }
        return head;
    }
}

////////////////////// Remove Nth node form the end of a list ///////////
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
      int size =0 ;
        ListNode temp = head;
        while(temp!=null){size++;temp= temp.next;}
        temp = head;ListNode prev = head;
        for(int i=0;i<size;i++){
            if(size-n==i && i!=0){
                prev.next = temp.next;
            }
            else if(size-n == i && i==0){
                head = head.next;
            }
            prev = temp;temp =temp.next;
        }
        return head;
    }
}

///////////////// Merge two sorted LinkedLists ////////////
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1 ==null && list2 == null){return null;}
       ArrayList<Integer> a = new ArrayList<Integer>();
        while(list1!=null){
            a.add(list1.val);list1 = list1.next;
        }
        while(list2!=null){
            a.add(list2.val);list2 = list2.next;
        }
        Collections.sort(a);
        ListNode head = new ListNode(a.get(0),null);
        for(int i =1;i<a.size();i++){
            ListNode n = new ListNode(a.get(i),null);
            ListNode temp = head;
            while(temp.next!=null){
                temp = temp.next;
            }
            temp.next = n;
            
        }
        return head;
    }
}
