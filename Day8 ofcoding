class Solution {
    public int finalValueAfterOperations(String[] operations) {
       int res = 0;
       for(int i =0;i<operations.length;i++){
           if(operations[i].charAt(0)=='+' | operations[i].charAt(operations[i].length()-1)=='+'){
               res++;
           }
           else if(operations[i].charAt(0)=='-' | operations[i].charAt(operations[i].length()-1)=='-'){
               res--;
           }
       }
        return res;
    }
}

////////////////////////////// MAx word You can Type //////////
class Solution {
    public int canBeTypedWords(String text, String brokenLetters) {
        int max = 0;int space=0;
        ArrayList<Character> k  = new ArrayList<Character>();
        for(int i=0;i<brokenLetters.length();i++){
            k.add(brokenLetters.charAt(i));
        }
        for(int i=0;i<text.length();i++){
            if(text.charAt(i) == ' '){
                String word = text.substring(space,i);
                boolean b=false;
                for(int j=0;j<k.size();j++){
                    if(word.indexOf(k.get(j))!=-1){
                        b = true;
                    }
                }
                if(!b){max++;}
                space = i;
            }
            else if(i == text.length()-1){
                String word = text.substring(space,i+1);
                boolean b  = false;
                for(int j=0;j<k.size();j++){
                    if(word.indexOf(k.get(j))!=-1){
                        b = true;
                    }
                }
                if(!b){max++;}
            }
        }
        return max;
    }
}

////////////// Third Maximum ///////
import java.util.*;
class Solution {
    public int thirdMax(int[] nums) {
        int third = 0;
        Arrays.sort(nums);
        ArrayList <Integer> k = new ArrayList<Integer>();
        for(int i=nums.length-1;i>=0;i--){
            if(!k.contains(nums[i])){
                k.add(nums[i]);
            }
        }
        if(k.size()<3){
            third = k.get(0);
        }
        else{
            third = k.get(2);
        }
        return third;
    }
}

/////////////////////// Kth largest element ////////////
class Solution {
    public int findKthLargest(int[] nums, int k) {
       Arrays.sort(nums);
       return nums[nums.length-k];
        
    }
}

///////////// Divide a string into groups of k ////////////////////////
class Solution {
    public String[] divideString(String s, int k, char fill) {
      int l =0 ;int len = s.length();int arrle = 0;
       if(len%k==0){arrle = len/k;}
        else{arrle = (len/k)+1;} 
        String res[] = new String[arrle];int m =0;
       for(int i=1;i<s.length();i++){
           if(k>i && k%(i+1)==0)
           {
               String sub = s.substring(l,i+1);
               l=i+1;
               res[m] = sub;m++;
               
           }
           else if(k<i && (i+1)%k==0){
               String sub = s.substring(l,i+1);
               l= i+1;
               res[m] = sub;m++;
           }
           else if(i == s.length()-1){
               String sub  = s.substring(l,i+1);
               if(sub.length()<k){
                   while(sub.length()<=k-1){
                       sub += fill;
                   }
                   res[m] = sub;m++;
               }
           }
       } 
        return res;
    }
}
