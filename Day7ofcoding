class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int result = Integer.MAX_VALUE;
        Arrays.sort(nums);
        for(int i=0;i<nums.length-2;i++){
            int a_pointer = i+1;
            int b_pointer = nums.length-1;
            while(a_pointer<b_pointer){
                int sum = nums[i]+nums[a_pointer]+nums[b_pointer];
                if(sum>target){
                    b_pointer--;
                    
                }
                else{
                    a_pointer++;
                }
                if(Math.abs(sum-target)<Math.abs(result-target)){
                    result = sum;
                }
                }
            }
          
        return result;
    }
}

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        ArrayList<List<Integer> > result
            = new ArrayList<List<Integer> >();
        Arrays.sort(nums);
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length-2;j++){
               int a_pointer = j+1;
               int b_pointer =  nums.length-1;
                while(a_pointer<b_pointer){
                    int current_sum  = nums[i]+nums[j]+nums[a_pointer]+nums[b_pointer];
                    if(current_sum>target){
                        b_pointer--;
                    }
                    else if(current_sum == target){
                        List<Integer> list1
                             = new ArrayList<Integer>();
                        list1.add(nums[i]);list1.add(nums[j]);list1.add(nums[a_pointer]);
                        list1.add(nums[b_pointer]);
                        if(!result.contains(list1) && current_sum!=-294967296){
                            result.add(list1);
                        }
                        a_pointer++;
                        b_pointer--;
                    }
                    else{
                        a_pointer++;
                    }
                }
            }
            
          
            
            
        }
        return result;
    }
}

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int A[] = new int[2];
        int a_pointer = 0;
        int b_pointer = nums.length-1;
        while(a_pointer<b_pointer){
            int current_sum = nums[a_pointer]+nums[b_pointer];
            if(current_sum>target){
                b_pointer--;
            }
            else if(current_sum  == target){
                A[0] = a_pointer+1;A[1] = b_pointer+1;
                break;
            }
            else {
                a_pointer++;
            }
        }
        return A;
                             
    }
}
////////////////////////////////// 4Sum using hashset /////////////
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        return kSum(nums, target, 0, 4);
    }
    
    public List<List<Integer>> kSum(int[] nums, long target, int start, int k) {
        List<List<Integer>> res = new ArrayList<>();
        
        // If we have run out of numbers to add, return res.
        if (start == nums.length) {
            return res;
        }
        
        // There are k remaining values to add to the sum. The 
        // average of these values is at least target / k.
        long average_value = target / k;
        
        // We cannot obtain a sum of target if the smallest value
        // in nums is greater than target / k or if the largest 
        // value in nums is smaller than target / k.
        if  (nums[start] > average_value || average_value > nums[nums.length - 1]) {
            return res;
        }
        
        if (k == 2) {
            return twoSum(nums, target, start);
        }
    
        for (int i = start; i < nums.length; ++i) {
            if (i == start || nums[i - 1] != nums[i]) {
                for (List<Integer> subset : kSum(nums, target - nums[i], i + 1, k - 1)) {
                    res.add(new ArrayList<>(Arrays.asList(nums[i])));
                    res.get(res.size() - 1).addAll(subset);
                }
            }
        }
    
        return res;
    }
        
    public List<List<Integer>> twoSum(int[] nums, long target, int start) {
        List<List<Integer>> res = new ArrayList<>();
        Set<Long> s = new HashSet<>();
    
        for (int i = start; i < nums.length; ++i) {
            if (res.isEmpty() || res.get(res.size() - 1).get(1) != nums[i]) {
                if (s.contains(target - nums[i])) {
                    res.add(Arrays.asList((int)target - nums[i], nums[i]));
                }
            }
            s.add((long)nums[i]);
        }
                                                  
        return res;
    }
}

/////////////////////////// Search In Rotated Array //////////////
class Solution {
    public int search(int[] nums, int target) {
        int targ =-1;
        int a_pointer = 0;int b_pointer = nums.length-1;
        while(a_pointer<=b_pointer){
            if(nums[a_pointer] == target){
                targ  =a_pointer;
            }
            else if(nums[b_pointer]==target){
                targ  = b_pointer;
            }
            a_pointer++;
            b_pointer--;
        }
      return targ;
    }
}
