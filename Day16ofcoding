///////////////////// LinkedList /////
     /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int data;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.data = val; }
 *     ListNode(int val, ListNode next) { this.data = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
       ListNode current = l1;int sum1 = 0;int i=0;int sum2 = 0;
       while(current!=null){
           sum1 += current.val*(Math.pow(10,i));
           i++;
           current = current.next;
       }
        i=0;
       while(l2!=null){
          sum2 += l2.val*(Math.pow(10,i));i++;l2 = l2.next; 
       }
        int res = sum1+sum2;
        ListNode head = new ListNode(res%10,null);
        res = res/10;
        while(res>=10){
            ListNode n = new ListNode(res%10,null);
            ListNode c = head;
            while(c.next!=null){
                c  = c.next;
            }
            c.next = n; 
            res = res/10;
            
        }
        if(res!=0){
        ListNode n = new ListNode(res,null);
        ListNode c = head;
        while(c.next!=null){
                c  = c.next;
            }
        c.next = n;
        
        }
       return head; 
    }
}

class Solution {
    // Add Two Numbers (Java improved)
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummyHead = new ListNode(0);
        ListNode curr = dummyHead;
        int carry = 0;
        while (l1 != null || l2 != null || carry != 0) {
            int x = (l1 != null) ? l1.val : 0;
            int y = (l2 != null) ? l2.val : 0;
            int sum = carry + x +  y;
            carry = sum / 10;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;
            if (l1 != null)
                l1 = l1.next;
            if (l2 != null)
                l2 = l2.next;
              }
        return dummyHead.next;
    }
}

////////////  delete a nod with current givennode as hint ////
class Solution {
    public void deleteNode(ListNode node) {
        node.val = node.next.val;
        node.next = node.next.next;
    }
}

/////////// Maximum Twin sum in a LinkedList ////////
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int pairSum(ListNode head) {
        ListNode temp = head;int size = 0;int max = 0;
        while(temp!=null){
            temp  = temp.next;
            size++;
        }
        temp = head;int it = 0;int A[] = new int[size/2];
       for(int i=0;i<size/2;i++){
           A[it] = temp.val;temp = temp.next;it++;
       }
        for(int i =size/2;i<size;i++){
              A[size-it-1] += temp.val;
               it++;temp = temp.next; 
        }
        Arrays.sort(A);
        max = A[A.length-1];
        return max;
    }
}

//////////// reverse a LinkedList //////
class Solution {
    public ListNode reverseList(ListNode head) {
        ArrayList<Integer> k = new ArrayList<Integer>();
        ListNode temp = head;
        if(head==null){return head;}
        while(temp!=null){
            k.add(temp.val);temp=temp.next;
        }
        ListNode headd = new ListNode();
        for(int i=0;i<k.size();i++){
            ListNode ne = new ListNode(k.get(i),null);
            if(i==0){
                headd = ne;
            }
            else{
                ne.next = headd;
                headd= ne;
            }
            
        }
        return headd;
    }
}

/////////// 0ms solution///
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev=null;
        ListNode curr=head;
        
        while(curr!=null)
        {
            ListNode temp=curr.next;
            curr.next=prev;
            prev=curr;
            curr=temp;
        }
        head=prev;
        return head;
        
    }
}

////////////// Merge Nodes in between Zeros //////
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeNodes(ListNode head) {
        ListNode k = head.next;
        ArrayList<Integer> a = new ArrayList<Integer>();int sum = 0;
        while(k.next!=null){
            if(k.val==0){
                a.add(sum);sum = 0;
            }
            else{
                sum+=k.val;
            }
            k = k.next;
        }
        a.add(sum);
        ListNode hea = new ListNode();
        Collections.reverse(a);
        for(int i=0;i<a.size();i++){
            ListNode n = new ListNode(a.get(i),null);
            if(i==0)
                hea = n;
            else{
                n.next = hea;
                hea = n;
            }
        }
        return hea;
        
    }
}

