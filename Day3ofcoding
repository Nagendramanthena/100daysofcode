// special positions in binary matrix
class Solution {
    public int numSpecial(int[][] mat) {
     int r = mat.length;int c = mat[0].length;
     int R[] = new int[r];int C[] = new int[c];
     for(int i=0;i<r;i++){
         for(int j=0;j<c;j++){
             if(mat[i][j] == 1){
                 R[i]++;
                 C[j]++;
             }
         }
     }
     int count=0;
     for(int i=0;i<r;i++){
         for(int j=0;j<c;j++){
             if(mat[i][j] == 1 && R[i] ==1 && C[j]==1){
                 count++;
             }
         }
     }
    return count;
    }
}
logic :count no of 1s in rows and cols

// string to lowercase

class Solution {
    public String toLowerCase(String s) {
            String sk = s.toLowerCase();
        return sk;
        
    }
}

//Alike Strings
class Solution {
    public boolean halvesAreAlike(String s) {
        int s1vo = 0;
        int s2vo=0;
        String ss = s.toLowerCase();
        int l = (s.length()/2);
        String s1 = ss.substring(0,l);
        String s2 = ss.substring(l,2*l);
        for(int i=0;i<s1.length();i++){
            if(s1.charAt(i) == 'a' | s1.charAt(i) == 'e' | s1.charAt(i) =='i' | s1.charAt(i) == 'o' | s1.charAt(i) == 'u'){
                s1vo++;
            }
        }
        for(int j=0;j<s2.length();j++){
             if(s2.charAt(j) == 'a' | s2.charAt(j) == 'e' | s2.charAt(j) =='i' | s2.charAt(j) == 'o' | s2.charAt(j) == 'u'){
                s2vo++;
            }
        }
        boolean b = false;
        if(s1vo == s2vo){
            b= true;
        }
        
        return b;
        
    }
}

// Reverse String in O(1);


public class Solution {
    public static String reverseString(String str) {
        
        int n = str.length();
        
        // Since strings are immutable in java, we are using a char array.
        char [] charArray = str.toCharArray();
        
        for (int i = 0; i < n / 2; ++i){
            // Swap characters.
            char ch = charArray[i];
            charArray[i] = charArray[n - i - 1];
            charArray[n - i - 1] = ch;
        }
        
        return String.valueOf(charArray);
    }

}

// strString 

class Solution {
    public int strStr(String haystack, String needle) {
        int k = 0;
        if(needle.length()==0){
            k=0;
        }
        else if(needle.length()!=0){
            int l = haystack.indexOf(needle);
            k=l;
     
        }
    return k;
    }
}
