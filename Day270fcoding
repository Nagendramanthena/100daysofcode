    public int deepestLeavesSum(TreeNode root) {
        int res = 0, i;
        LinkedList<TreeNode> q = new LinkedList<TreeNode>();
        q.add(root);
        while (!q.isEmpty()) {
            for (i = q.size() - 1, res = 0; i >= 0; --i) {
                TreeNode node = q.poll();
                res += node.val;
                if (node.right != null) q.add(node.right);
                if (node.left  != null) q.add(node.left);
            }
        }
        return res;
    }
    
    class Solution {
    List<Integer> depthlist = new ArrayList<>();
    List<TreeNode> nodelist = new ArrayList<>();
     
    
    public void dfs(TreeNode root,int depth){
        if(root == null){
            return;
        }
        depth++;
        depthlist.add(depth);
        nodelist.add(root);
        dfs(root.left,depth);
        dfs(root.right,depth);
        
        
    }
    public int deepestLeavesSum(TreeNode root) {
        dfs(root,0);int sum =0;
        int max = Collections.max(depthlist);
        for(int i=0;i<nodelist.size();i++){
            if(depthlist.get(i) == max){
                sum+=nodelist.get(i).val;
            }
        }
        return sum;
    }
    
    
    // Range sum binarytree(938) ////////
    class Solution {
    int sum = 0;int lower = 0;int higher = 0;
    
    public void dfs(TreeNode root){
        if(root == null){
            return;
        }
        dfs(root.left);
        dfs(root.right);
        if(root.val>=lower && root.val<=higher){
            sum += root.val;
        }
        
    }
    public int rangeSumBST(TreeNode root, int low, int high) {
        lower = low;higher = high;
        dfs(root);
        return sum;
    }
}
