// max_wealth leetcode

class Solution {
    public int maximumWealth(int[][] accounts) {
        int max_wealth = 0;
        for(int i=0;i<accounts.length;i++){
            int cu=0;
            for(int j=0;j<accounts[i].length;j++){
                cu = cu+accounts[i][j];
                if(cu>max_wealth){
                    max_wealth = cu;
                }
            }
      
        }
      return max_wealth;  
    }
}

// diagonal sum

class Solution {
    public int diagonalSum(int[][] mat) {
        int diagonals=0;
        for(int i=0;i<mat.length;i++){
            for(int j=0;j<mat[i].length;j++){
                if(i==j){
                    diagonals = diagonals + mat[i][j];
                }
                else if(i+j == (mat.length-1) && i!=j){
                    diagonals = diagonals+ mat[i][j];
                }
            }
        }
     return diagonals;
    }
}

// flipping an image

class Solution {
    public int[][] flipAndInvertImage(int[][] A) {
        for(int i=0;i<A.length;i++){
            int low = 0;
            int high = A[i].length-1;
            while(low<=high){
                if(A[i][low] == A[i][high]){
                    A[i][low] = 1-A[i][low];
                    A[i][high] = A[i][low];
                }
             low++;
             high--;
            }
            
        }
        
        return A;
        
    }
}
       a             b
logic:[1,0,0,0,1,1,0,0]
we need to put pointers at end 
and we need to change if both elementts are  same


// day2 4th question

class Solution {
    public List<Integer> luckyNumbers (int[][] nums) {
        List<Integer> n = new ArrayList<Integer>();
        for(int i=0;i<nums.length;i++){
            int minrow = nums[i][0];
            int index = 0;
            for(int j=1;j<nums[i].length;j++){
                if(nums[i][j]<minrow){
                    minrow  = nums[i][j];
                    index = j;
                }
                
            }
            int maxcol=nums[0][index];
            for(int k=1;k<nums.length;k++){
                if(nums[k][index]>maxcol){maxcol = nums[k][index];}
                }
            if(minrow>=maxcol && !n.contains(minrow)){
                n.add(minrow);
            }
            }
            
        
     return n;
        
    }
}

logic:finding minrow in col and finding max in that col;
