// max_wealth leetcode

class Solution {
    public int maximumWealth(int[][] accounts) {
        int max_wealth = 0;
        for(int i=0;i<accounts.length;i++){
            int cu=0;
            for(int j=0;j<accounts[i].length;j++){
                cu = cu+accounts[i][j];
                if(cu>max_wealth){
                    max_wealth = cu;
                }
            }
      
        }
      return max_wealth;  
    }
}

// diagonal sum

class Solution {
    public int diagonalSum(int[][] mat) {
        int diagonals=0;
        for(int i=0;i<mat.length;i++){
            for(int j=0;j<mat[i].length;j++){
                if(i==j){
                    diagonals = diagonals + mat[i][j];
                }
                else if(i+j == (mat.length-1) && i!=j){
                    diagonals = diagonals+ mat[i][j];
                }
            }
        }
     return diagonals;
    }
}

// flipping an image

class Solution {
    public int[][] flipAndInvertImage(int[][] A) {
        for(int i=0;i<A.length;i++){
            int low = 0;
            int high = A[i].length-1;
            while(low<=high){
                if(A[i][low] == A[i][high]){
                    A[i][low] = 1-A[i][low];
                    A[i][high] = A[i][low];
                }
             low++;
             high--;
            }
            
        }
        
        return A;
        
    }
}
       a             b
logic:[1,0,0,0,1,1,0,0]
we need to put pointers at end 
and we need to change if both elementts are  same


// day2 4th question

class Solution {
    public List<Integer> luckyNumbers (int[][] nums) {
        List<Integer> n = new ArrayList<Integer>();
        for(int i=0;i<nums.length;i++){
            int minrow = nums[i][0];
            int index = 0;
            for(int j=1;j<nums[i].length;j++){
                if(nums[i][j]<minrow){
                    minrow  = nums[i][j];
                    index = j;
                }
                
            }
            int maxcol=nums[0][index];
            for(int k=1;k<nums.length;k++){
                if(nums[k][index]>maxcol){maxcol = nums[k][index];}
                }
            if(minrow>=maxcol && !n.contains(minrow)){
                n.add(minrow);
            }
            }
            
        
     return n;
        
    }
}

logic:finding minrow in col and finding max in that col;


//  Reshape matrix

class Solution {
    public int[][] matrixReshape(int[][] mat, int r, int c) {
        int A[][] = new int[r][c];
        int row=0;
        int column=0;
        if(mat.length*mat[0].length == r*c){
        for(int i=0;i<mat.length;i++){
            for(int j=0;j<mat[i].length;j++){
                if(row<r && column<c){
                    A[row][column] = mat[i][j];
                    column++;
                }
                else if(row>=r && column<c){
                    row=0;
                    column++;
                    A[row][column] = mat[i][j];
                    row++;
                }
                else if(row<r && column>=c){
                    column = 0;
                    row++;
                    A[row][column] = mat[i][j];
                    column++;
                }
            
                
            }
        }
         return A;
        }
        else{
            int b[][] = new int[mat.length][mat[0].length];
            for(int i = 0; i < mat.length; i++)
          b[i] =  mat[i].clone();
            return b;
        }
        
    }
}

//BuildingsProjection(coding ninjas)
public class Solution {
    public static int projectionArea(int[][] grid) {
        // Dimension of grid.
        int n =  grid.length;
        
        int result = 0;
        for(int i = 0; i < n; i++) {
            int rowMax = 0, colMax = 0;
            for(int j = 0; j < n; j++) {
                if(grid[i][j] > 0) {
                    // In the XY plane, the shadow made by each building will be 1 square.
                    result++;
                }
                // In the YZ plane, the shadow made will be the largest value for each row in the grid.
                rowMax = Math.max(rowMax, grid[i][j]);
                // In the ZX plane, the shadow made will be the largest value for each column in the grid.
                colMax = Math.max(colMax, grid[j][i]);
            }
            
            result = result + rowMax + colMax;
        }
        
        return result;
    }
}

// All duplicates in O(n)

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> list = new ArrayList<Integer>();
        Arrays.sort(nums);
        int j=nums[0];
        for(int i=1;i<nums.length;i++){
            if(nums[i] == j){
                list.add(nums[i]);
            }
            else{
                j = nums[i]; 
            }
        }
        
     return list;   
    }
}
