class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int k=0;
        for(int i=0;i<n;i++){
                nums1[m+k] = nums2[i];
                k++;
            }
            
        Arrays.sort(nums1);
     
    }
}


// day1 5th sum
//Squares of sorted arrays


class Solution {
    public int[] sortedSquares(int[] nums) {
        for(int i=0;i<nums.length;i++){
            nums[i] = nums[i]*nums[i];
        }
        
        Arrays.sort(nums);
        int b[] = nums.clone();
            
    return b;
        
    }
    
}

// day1 6th sum

//runningsum

class Solution {
    public int[] runningSum(int[] nums) {
     int A[] = new int[nums.length];
        int runsum =0;
     for(int i=0;i<nums.length;i++){
         runsum = runsum+nums[i];
         A[i] = runsum;
     }
    return A;
    }
}

// day1 7th question

// duplicate element O(n)

class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums);
        boolean res = false;
        int number = nums[0];
        
        for(int i=1;i<nums.length;i++){
            if(number == nums[i]){
                res = true;
                break;
            }
            else{
                number = nums[i];
            }
        }
     return res;  
    }
}
