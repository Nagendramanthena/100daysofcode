class Solution {
    public int calPoints(String[] ops) {
        ArrayList <Integer> k = new ArrayList<Integer>();
        for(int i=0;i<ops.length;i++){
            String pres = ops[i];
            switch(pres) {
                    case("C"):
                    { 
                        int l = k.size()-1;
                        k.remove(k.get(l));
                    }
                    break;
                    
                    case("D"):
                    {
                        int l = k.size()-1;
                        k.add(2*k.get(l));
                    }
                    break;
                    
                    case("+"):{
                        int l = k.size()-1;
                        k.add((k.get(l))+(k.get(l-1)));
                    }
                    break;
                    
                    default:
                    k.add(Integer.valueOf(pres));
                    break;
            }
        }
        int sum = 0;
        for(int i = 0; i < k.size(); i++)
            sum += k.get(i);
    return sum;
    }
}

//////////////// shuffling an array////////
class Solution {
    public int[] shuffle(int[] nums, int n) {
        int A[] = new int[nums.length];int j=0;int ra=n;int la=0;int l = nums.length;
        while(l>0){
        if(j%2==0){
            A[j] = nums[la];
            la++;j++;
        }
        else{
            A[j] = nums[ra];ra++;j++;
        }
        l--;
        }
        return A;
    }
}

/////////////////////// Middle Index in an array ///////////
class Solution {
    public int findMiddleIndex(int[] nums) {
        int left[] = new int[nums.length];left[0] = 0;int index=-1;
        int right[] = new int[nums.length];right[nums.length-1]=0;
        for(int i=1;i<nums.length;i++){
            left[i] = left[i-1]+nums[i-1];
        }
        for(int j=nums.length-2;j>=0;j--)
            right[j] = nums[j+1]+right[j+1];
        for(int i=0;i<nums.length;i++)
            if(left[i]==right[i]){
                index=i;
                break;
            }
      return index;
    }
}
